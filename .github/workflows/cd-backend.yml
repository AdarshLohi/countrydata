name: CD Pipeline

on:
  workflow_run:
    workflows: ['CI Pipeline']
    types:
      - completed
    branches: [main]

jobs:
  deploy:
    runs-on: self-hosted
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pull the docker image from Dockerhub
        run: |
          echo "Pulling latest image..."
          sudo docker pull adarshlohi/cicd-pipeline:latest

      - name: Delete the old docker container
        run: |
          echo "Removing old container if exists..."
          sudo docker rm -f cicd-pipeline-container || true

      - name: Run the docker container
        run: |
          echo "Starting new container..."
          sudo docker run -d -p 8080:4000 --name cicd-pipeline-container adarshlohi/cicd-pipeline:latest

      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          sudo docker ps | grep cicd-pipeline-container

      - name: Set up Docker Compose
        run: |
          # Ensure docker-compose is installed
          if ! command -v docker-compose &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y docker-compose
          fi

      - name: Deploy with Docker Compose
        run: |
          # Stop any running containers
          sudo docker-compose down || true

          # Remove old images
          sudo docker image prune -f

          # Pull latest image
          sudo docker-compose pull

          # Start containers in detached mode
          sudo docker-compose up -d --build

          # Wait for container to start
          sleep 10

      - name: Verify deployment
        run: |
          # Check container status
          if ! sudo docker-compose ps | grep "Up"; then
            echo "Container is not running"
            sudo docker-compose logs
            exit 1
          fi

          # Check if application is responding
          if ! curl -s --retry 5 --retry-delay 5 http://localhost:8080/; then
            echo "Application is not responding"
            sudo docker-compose logs
            exit 1
          fi

          echo "Deployment successful!"
